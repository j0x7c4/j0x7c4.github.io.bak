<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: R | 醉過方知酒濃]]></title>
  <link href="http://yoursite.com/tags/r/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-11-23T00:41:48+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Eli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Feature Selection in R is EASY!]]></title>
    <link href="http://yoursite.com/blog/2013/10/10/new-fselector-r/"/>
    <updated>2013-10-10T23:43:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/10/10/new-fselector-r</id>
    <content type="html"><![CDATA[<p>最早认识R语言是看到一本书叫做<i>&ldquo;Machine Learning for Hackers&rdquo;</i>, 听说R在machine learning的研究方面很有用处，就是一个专门为Machine Learning而生的语言，不过一直没用仔细研究过。在网上寻找Feature Selection方面的工具时，看到有人推荐R的package <a href=http://cran.r-project.org/web/packages/FSelector/FSelector.pdf>FSelector</a> . 于是就载下来尝试一下，结果发现真的很方便。</p>

<h4>R可以方便的使用现成的benchmark（比如<code>iris</code>），只要一句话就可以轻松导入数据！</h4>

<p>下面是一个简单的例子使用FSelector, 采用cvs来寻找feature的子集。其中第一个参数Species~表示数据集iris中的类别(label).</p>

<p><code>r
library(FSelector)
data(iris)
subset &lt;- cfs(Species~., iris)
f &lt;- as.simple.formula(subset, "Species")
print(f)
</code>
下面这个例子比较高阶，可以自己指定评价feature子集的好坏。采用best first search的策略来寻找子集。其中evaluator训练了rpart model，通过计算error rate来评价feature的好坏。</p>

<p>```r
library(FSelector)
library(rpart)
data(iris)
evaluator &lt;&ndash; function(subset) {
  #k-fold cross validation
  k &lt;&ndash; 5
  splits &lt;&ndash; runif(nrow(iris))
  results = sapply(1:k, function(i) {</p>

<pre><code>test.idx &lt;- (splits &gt;= (i - 1) / k) &amp; (splits &lt; i / k)
train.idx &lt;- !test.idx
test &lt;- iris[test.idx, , drop=FALSE]
train &lt;- iris[train.idx, , drop=FALSE]
tree &lt;- rpart(as.simple.formula(subset, "Species"), train)
error.rate = sum(test$Species != predict(tree, test, type="c")) / nrow(test)
return(1 - error.rate)
</code></pre>

<p>  })
  #print(subset)
  #print(mean(results))
  return(mean(results))
}
subset &lt;&ndash; best.first.search(names(iris)[-5], evaluator)
f &lt;&ndash; as.simple.formula(subset, &ldquo;Species&rdquo;)
print(f)
```</p>

<h3>iris</h3>

<p>This famous (Fisher&rsquo;s or Anderson&rsquo;s) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.</p>

<h3>cfs</h3>

<p>The algorithm finds attribute subset using correlation and entropy measures for continous and discrete data.</p>

<h2>Hints</h2>

<ul>
<li>虽然原生的R语言的IDE也不错用，但是发现一个更加强大的IDE，RStudio, 真是可以媲美matlab的IDE了。</li>
<li>R语言也可以在命令行中用batch的方式来运行，具体指令是<code>R CMD BATCH [options] infile [outfile]</code>, infile就是R的脚本文件，R的输出一般无法显示到STDOUT中，是以文件的形式存起来。如果没有指定outfile，就会以原文件名的方式来命名。在脚本执行的时候，很多无关紧要的内容也会被输出，可以使用options命令的<code>--slave</code>. 在最后的输出中，他也会很好心的帮你计算运行时间，如果不需要，也可以加<code>--no-timing</code>. 详见<a href="http://stat.ethz.ch/R-manual/R-devel/library/utils/html/BATCH.html">http://stat.ethz.ch/R-manual/R-devel/library/utils/html/BATCH.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
