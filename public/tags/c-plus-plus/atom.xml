<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: C++ | 醉過方知酒濃]]></title>
  <link href="http://2naive.me/tags/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://2naive.me/"/>
  <updated>2014-01-22T02:31:28+08:00</updated>
  <id>http://2naive.me/</id>
  <author>
    <name><![CDATA[Eli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于C++ std::map]]></title>
    <link href="http://2naive.me/blog/2013/07/17/cpp-std-map/"/>
    <updated>2013-07-17T00:00:00+08:00</updated>
    <id>http://2naive.me/blog/2013/07/17/cpp-std-map</id>
    <content type="html"><![CDATA[<p>C++的std::map是个很好用的东西，将key和value进行对应，而且可以是任意类型的key.</p>

<p>以前一直没有研究过具体这个MAP是怎么实现的，只是大概的知道它是一个binary search tree. 那如果一个key不是数字，字符串这种相对简单的类型的时，而是一个vector, 或者一个pair类型的对象时，key要如何对应value呢？</p>

<p>我在Quora上提了这个问题，很快就有人回答了。</p>
<blockquote>std::map is a self-balancing binary search tree ordered using a comparator, whose type is given as the third template parameter to std::map. If you don't give this template parameter, it defaults to std::less&lt;KeyType&gt;. std::less is basically a function object wrapper around the "&lt;" operator. The &lt; operator is defined for types like int, as well as for std::pair (which compares lexicographically).</blockquote>
<p>Map中的Key会按照它自己的类中定义的less运算符去比较大小，如果像vector, pair这种多元素的对象，会根据里面所有数据的字典序来进行大小的判断。</p>
]]></content>
  </entry>
  
</feed>
