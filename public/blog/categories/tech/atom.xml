<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | 醉過方知酒濃]]></title>
  <link href="http://yoursite.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2013-10-04T17:10:12+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Eli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[添加404页面]]></title>
    <link href="http://yoursite.com/blog/2013/10/02/add-404-page/"/>
    <updated>2013-10-02T23:48:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/10/02/add-404-page</id>
    <content type="html"><![CDATA[<p>今天给博客加了404页面，看起来感觉更加完整了一点。
加404页面的方法很简单，只要在<code>source</code>目录下面创建<code>404.html</code>文件，当发生404错误时，octopress就会自动跳转到<code>404.html</code>这个页面。
具体内容如下：</p>

<h2>```</h2>

<p>layout: page
title: Sorry，404错误！你要访问的网页不存在!</p>

<h2>footer: false</h2>

<p><code>
其中的</code>title```可以改成任何自己想要的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从wordpress到octopress迁移成功]]></title>
    <link href="http://yoursite.com/blog/2013/10/01/cong-wordpressdao-octopressqian-yi-cheng-gong/"/>
    <updated>2013-10-01T23:49:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/10/01/cong-wordpressdao-octopressqian-yi-cheng-gong</id>
    <content type="html"><![CDATA[<p>忙活了一晚上，终于把原来wordpress的数据导入到了octopress中，心情不好的时候做些geek的事情转移一下注意力也不错，现在有点小开心。</p>

<p>我是参照下面这个链接介绍的方法，把原来wordpress的数据导出成xml文件，然后再用jekyll-import来转的。不过貌似转完之后还需要自己手动修改一些地方，比如代码高亮部分。幸好我之前的内容也不多，就小改了一下。
<a href=http://jekyllrb.com/docs/migrations/><a href="http://jekyllrb.com/docs/migrations/">http://jekyllrb.com/docs/migrations/</a></a></p>

<p>不过目前还有个问题，从wordpress转过来的文章，在超链接上还是有点问题，如果标题中有中文，转完后的文件名是unicode编码，之后会找不到超链接。于是我手动把那些文件名改成了英文，幸好文章不多，大概改了半小时改完了。</p>

<p>接下来要了解markdown语法啦，用这个写博客真的很酷！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[改版octopress 之 安装]]></title>
    <link href="http://yoursite.com/blog/2013/10/01/change-to-octopress/"/>
    <updated>2013-10-01T00:00:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/10/01/change-to-octopress</id>
    <content type="html"><![CDATA[<p>心血来潮想把博客从wordpress改成octopress, 毕竟在heroku上想用wordpress上传照片不太方便，而且比起静态网页来，速度慢很多。</p>

<p>但是我之前没有碰过ruby，一步一步按照网上的guide慢慢来。</p>

<p>首先从git上抓来octopress
<code>
git clone git@github.com:imathis/octopress.git
</code>
然后进入octopress目录下，build源代码
<code>
cd octopress
bundle install
rake install
</code>
以上几步都没有问题，然后执行
<code>
rake preview
</code>
然后问题就来了，出现了错误</p>

<p>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000
rake aborted!
undefined method `spawn' for Process:Module</p>

<p>因为octopress需要ruby 1.9.3，而我原本mac上的ruby是1.8.3. 所以要把ruby更新到1.9.3才能用</p>

<p>网上看了一遍后，用RVM可以很好的管理ruby的版本，可以方便的在多个ruby版本中进行切换，还能很方便的安装新版的ruby.</p>

<p>我安装stable版本的rvm
<code>
curl -L https://get.rvm.io | bash -s stable
</code>
然后将rvm写到用户环境中。
<code>
echo "source $HOME/.rvm/scripts/rvm" &amp;gt;&amp;gt; ~/.bash_profile
</code>
具体详见 <a href="https://rvm.io/rvm/install"><a href="https://rvm.io/rvm/install">https://rvm.io/rvm/install</a></a></p>

<p>然后使用rvm来安装1.9.3版本的ruby.
<code>
rvm install ruby-1.9.3-p448
</code>
不过在这之前，要先确定安装了xcode的command line tools.</p>

<p>可能因为国内网络的原因，这个安装过程相当的漫长，我觉得应该先去吃个午饭比较好。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HIVE中使用python实现UDF]]></title>
    <link href="http://yoursite.com/blog/2013/09/25/hive-python-udf/"/>
    <updated>2013-09-25T00:00:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/09/25/hive-python-udf</id>
    <content type="html"><![CDATA[<p>HIVE，FACEBOOK的一个开源项目，利用类SQL的语句（HiveQL）来加快一般的MapReduce的开发过程。</p>

<p>UDF，user defined function, 因为HIVE毕竟不是一般的关系型数据库，支持的HQL有限，如果要实现复杂的功能，就要通过自己定义函数来帮助实现。</p>

<p>HIVE应该利用PIPE的原理，将自己查询的结果放到python脚本的stdin中。所以他的查询结果不会显示在terminal中，terminal中显示的结果是python的执行结果。</p>

<p>使用HIVE的命令进入数据仓库(search)
<code>
use search;
</code>
使用HIVE的命令查看已经建立的表
<code>
show tables;
</code>
使用HIVE的命令查看xxx表中的字段
<code>
describe xxx;
</code>
使用HIVE命令用PYTHON实现UDF
<code>
add file udf.py;
SELECT
TRANSFORM(keyword)
USING 'python udf.py'
AS(keyword)
FROM xxx
WHERE dt='2013-09-25'
;
</code>
要注意的是，这里的TRANSFORM的内容可以写*，但是AS()里就不能写*，会报错。</p>

<p>输入到python中的内容，是按照AS里的数量来决定的。</p>

<p>下面是python的脚本，内容很简单，就是把输入的东西原封不动输出来。
``` python udf.py
import sys
for line in sys.stdin:</p>

<pre><code>line = line.strip()
print line
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV in Python]]></title>
    <link href="http://yoursite.com/blog/2013/07/20/opencv-in-python/"/>
    <updated>2013-07-20T00:00:00+08:00</updated>
    <id>http://yoursite.com/blog/2013/07/20/opencv-in-python</id>
    <content type="html"><![CDATA[<p>OpenCV基本上每個學Computer Vision都用過，我之前也是用C++來使用OpenCV, 最近為了處理一些圖片轉影片，加Marker之類的簡單的操作，懶得再用C++去寫。於是就嘗試用Python來寫OpenCV.</p>

<p>在Python中使用OpenCV, 只要把OpenCV的Library加到Python的Lib目錄下面就可以了。</p>

<p>具體就是把OpenCV目錄下的”build/python/2.7/cv2.pyd" 複製到Python的“Lib/site-packages”目錄中。</p>

<p>OpenCV被包在cv2这个module中，在一开始加载这个module就可以了。</p>

<p>OpenCV中经常会用到cv::Size, cv::Point, 在python中就用tuple来代替，不用再定义cv::Size或者cv::Point. 比如原来C++中定义一个size用cv::Size(640,480), 现在Python中直接用(640,480)来代替就好了。</p>

<p>下面这个例子就是把image_dir中的图片转换成avi格式的影片
``` python
import sys
import os
import cv2
import re
def intCmp ( x,y ):</p>

<pre><code>a = re.search('([\d]+).png',x).group(1)
b = re.search('([\d]+).png',y).group(1)
return int(a)-int(b)
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>if len(sys.argv)&lt;3:
    print "Usage: %s (image_dir) (output)" %(sys.argv[0])
    exit(1)
image_dir = sys.argv[1]
output_file = sys.argv[2]
image_list = sorted(os.listdir(image_dir),cmp=intCmp)
video_writer = cv2.VideoWriter(output_file,-1,30,(640,480))
for image_file in image_list:
    print image_file
    img = cv2.imread("%s/%s"%(image_dir,image_file.strip()))
    cv2.imshow("rgb",img)
    key = cv2.waitKey(10)
    video_writer.write(img)
    if key == 27:
        break;
</code></pre>

<p>```
更多的细节可以看document</p>

<p><a href="http://docs.opencv.org/modules/refman.html"><a href="http://docs.opencv.org/modules/refman.html">http://docs.opencv.org/modules/refman.html</a></a></p>
]]></content>
  </entry>
  
</feed>
